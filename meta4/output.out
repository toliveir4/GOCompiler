declare i32 @atoi(i8*)
declare i32 @printf(i8*, ...)

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1

define i32 @factorial(i32) {
	%n = alloca i32
	store i32 %0, i32* %n


	ret i32 %0
}

define i32 @main(i32, i8**) {
	%argc = alloca i32
	store i32 %0, i32* %argc
	%argv = alloca i8**
	store i8** %1, i8*** %argv

	%argument = alloca i32

	%2 = load i8**, i8*** %argv
	%3 = getelementptr inbounds i8*, i8** %2, i64 1
	%4 = load i8*, i8** %3
	%5 = call i32 @atoi(i8* %4)
	store i32 %6, i32* %argument

	%7 = load i32, i32* %argument
	%8 = call i32 @factorial(i32 %7)
	%8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %7)

	ret i32 0
}

Program
..FuncDecl
....FuncHeader
......Id(factorial)
......Int
......FuncParams
........ParamDecl
..........Int
..........Id(n)
....FuncBody
......If
........Eq - bool
..........Id(n) - int
..........IntLit(0) - int
........Block
..........Return
............IntLit(1) - int
........Block
......Return
........Mul - int
..........Id(n) - int
..........Call - int
............Id(factorial) - (int)
............Sub - int
..............Id(n) - int
..............IntLit(1) - int
..FuncDecl
....FuncHeader
......Id(main)
......FuncParams
....FuncBody
......VarDecl
........Int
........Id(argument)
......ParseArgs - int
........Id(argument) - int
........IntLit(1) - int
......Print
........Call - int
..........Id(factorial) - (int)
..........Id(argument) - int
